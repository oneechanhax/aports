# Contributer: Natanael Copa <ncopa@alpinelinux.org>
# Caintainer: Rebekah Rowe <rebekahrowe9999@gmail.com>
pkgname=linux
pkgver=5.7
case $pkgver in
	*.*.*)	_kernver=${pkgver%.*};;
	*.*) _kernver=$pkgver;;
esac
pkgrel=0
pkgdesc="Linux kernel"
url="https://www.kernel.org"
arch="all !armhf"
license="GPL-2.0"
# TODO: Purge unneeded dependancies
_depends_dev="perl gmp-dev elfutils-dev bash flex bison"
makedepends="$_depends_dev sed installkernel bc linux-headers linux-firmware-any openssl-dev diffutils"
source="https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/linux-$_kernver.tar.xz
	config-x86_64"
if [ "${pkgver%.0}" = "$pkgver" ]; then # Add patches to sources
	source="$source
	https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/patch-$pkgver.xz"
fi
options="!strip"

# FIXME: doesnt build, in the middle of changes

# NOTE: Alow of this is kinda magic, we need a better way of building/install kernels
# TODO: maybe make a kernel builder program, give it a config and it spits out stuff for u automaticly and cleanly

prepare() { # normal kernel patching
    # TODO: can this be replaced with default_prepare
	local _patch_failed=
	if [ "$_kernver" != "$pkgver" ]; then
		msg "Applying patch-$pkgver.xz"
		unxz -c < "$srcdir"/patch-$pkgver.xz | patch -p1 -N
	fi

	# first apply patches in specified order
	for i in $source; do
		case $i in
		*.patch)
			msg "Applying $i..."
			if ! patch -s -p1 -N -i "$srcdir"/$i; then
				echo $i >>failed
				_patch_failed=1
			fi
			;;
		esac
	done

	if ! [ -z "$_patch_failed" ]; then
		error "The following patches failed:"
		cat failed
		return 1
	fi

	# remove localversion from patch if any
	#rm -f localversion*   
    #echo "-$pkgrel" > "$_builddir"/localversion-alpine || return 1
    
    cp "$srcdir"/config-$CARCH "$_builddir"/.config
	make -C "$srcdir"/linux-$_kernver ARCH="$_carch" \
		listnewconfig oldconfig
}

build() {
	unset LDFLAGS
	make ARCH="$_carch" CC="${CC:-gcc}"
}

package() {
	mkdir -p "$pkgdir"/boot "$pkgdir"/usr/lib/modules
	make -j1 modules_install $_install \
		ARCH="$_carch" \
		INSTALL_MOD_PATH="$pkgdir/usr" \
		INSTALL_PATH="$pkgdir"/boot \
		INSTALL_DTBS_PATH="$pkgdir/boot/dtbs"

	rm -f "$pkgdir"/usr/lib/modules/$pkgver-$pkgrel/build \
		"$pkgdir"/usr/lib/modules/$pkgver-$pkgrel/source
	rm -rf "$pkgdir"/usr/lib/firmware # TODO: use subpackage?

	install -D include/config/kernel.release \
		"$pkgdir"/usr/share/kernel/$_buildflavor/kernel.release
}

dev() {
	# copy the only the parts that we really need for build 3rd party
	# kernel modules and install those as /usr/src/linux-headers,
	# simlar to what ubuntu does
	#
	# this way you dont need to install the 300-400 kernel sources to
	# build a tiny kernel module
	#
	pkgdesc="Headers and script for third party modules for a vanilla kernel"
	depends="$_depends_dev"
	local dir="$subpkgdir"/usr/src/linux-headers-$pkgver-$pkgrel

	# first we import config, run prepare to set up for building
	# external modules, and create the scripts
	mkdir -p "$dir"
	cp "$srcdir"/config.${CARCH} "$dir"/.config
	echo "-$pkgrel-$_flavor" > "$dir"/localversion-alpine

	make -j1 -C "$builddir" O="$dir" ARCH="$_carch" syncconfig prepare modules_prepare scripts

	# remove the stuff that points to real sources. we want 3rd party
	# modules to believe this is the soruces
	rm "$dir"/Makefile "$dir"/source

	# copy the needed stuff from real sources
	#
	# this is taken from ubuntu kernel build script
	# http://kernel.ubuntu.com/git/ubuntu/ubuntu-zesty.git/tree/debian/rules.d/3-binary-indep.mk
	find .  -path './include/*' -prune \
		-o -path './scripts/*' -prune -o -type f \
		\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \
		   -name '*.sh' -o -name '*.pl' -o -name '*.lds' -o -name 'Platform' \) \
		-print | cpio -pdm "$dir"

	cp -a scripts include "$dir"

	find $(find arch -name include -type d -print) -type f | cpio -pdm "$dir"

	install -Dm644 "$builddir"/Module.symvers "$dir"/Module.symvers

	mkdir -p "$subpkgdir"/usr/lib/modules/$pkgver-$pkgrel
	ln -sf /usr/src/linux-headers-$pkgver-$pkgrel \
		"$subpkgdir"/usr/lib/modules/$pkgver-$pkgrel/build
}

headers() {
    mkdir -p "$subpkgdir/usr"
	make headers_install ARCH="$_carch" INSTALL_HDR_PATH="$subpkgdir/usr"

	find "$subpkgdir/usr" \( -name .install -o -name ..install.cmd \) -exec \
		rm -f {} \;

	# provided by libdrm
	rm -rf "$subpkgdir"/usr/include/drm
}

sha512sums="9f60f77e8ab972b9438ac648bed17551c8491d6585a5e85f694b2eaa4c623fbc61eb18419b2656b6795eac5deec0edaa04547fc6723fbda52256bd7f3486898f  linux-5.4.tar.xz
d19365fe94431008768c96a2c88955652f70b6df6677457ee55ee95246a64fdd2c6fed9b3bef37c29075178294a7fc91f148ead636382530ebfa822be4ad8c2f  0002-powerpc-config-defang-gcc-check-for-stack-protector-.patch
eff1c8e4103704c69e48ec82c4bbc2eb9137ff60c7845eda8f5dfd513ffc0d1bcecae9bdfb5634afccf76f2f2b9d1e96c8c3ad4750ef15d1bb4cb16b38a3bb4e  config-lts.aarch64
917948b91c49445f6b203bcd583e34f5987372d2d9e910a82d1396ca13317357ed8f20524844e275c34a97ff4e35b1b65bc44c252584ac45b07e53e8939a1918  config-lts.armv7
2d30d900d24989e4962194b3aac3db9f0afa3aabb4047a48edce8e2b6177b553da207ffc5d78debe54cbffee1ef68673ef54e959ac832c940bb366b1527b9856  config-lts.x86
7e2d2edd485dc1e3de6347f880704d1ca2f4db6668b5f0ab2a0c1e1d7d3225075b542fc1db59c682574a34ab38e6b7ed4fbd4f9f0d38280cb8676f13ceaa4247  config-lts.x86_64
aadbbb2155084be7a7c26c99bd0b1bc3052e0a1e709e79ec9552d5e4908b83f41f23066740a53fdc0a47defc8bc608036077e2e5e508c733525b712779c259c4  config-lts.ppc64le
b87a04a7da74277547173ff72ec69db027990073065f5959483e3bf0391e1450b840e7a69138ac6a93dbda0ffc15b7b5e008d8e61677c992faf2a51e6e3d1b36  config-lts.s390x
84ddcc66d2ddaaa9ca414a6c1f0b277e4c8d8bcf434e899616ee7b0c372881ab120eaec728b5cf67cfb5a7c4fcc18bbe75cf5cd62fdc9d8b6f6b65ea34658039  config-lts.mips64
5d1d637963b5bd67643827fa21c1ba885b69ca13635036fdb24a5479b7cf01148385f3453a62c106c4f26b4267dc484afae9d1cad451543a9d78d00d822e675c  config-lts.mips
23f11601767f9781f032fbd02f1c802ae4d39bd2db35808289ffe08e78b8743bac5b54e70d5ae2a1b6d79aece2c7951d27aaeeee629b8adf21daf8ac77b7765c  config-virt.aarch64
777eefb0958f4d3f456044a97e9ab3fe273e4f7e8a3688819af7902f8747e5136770d5dde371c5963657bd55e44ff1d6836ce2327e9891eecd8e9d18480ca20f  config-virt.armv7
fc32a7fa0f13b7237b0b5c55ad2308bf4ac805f9798c08c60cdcd525ca71cdcf0d55ff15b2358d0a1050ab671686e30e424288cc4bbd37904f1148816b36b56f  config-virt.x86
4ef5683e40560567f774d97d6c0334cd8d6c0edef0dcb9bceebfda63c8225e6ab9f61113a4a10a3f18b8ba04bd2ed6a890b21890cfa17d178f599cbf99cd72ab  config-virt.x86_64
41964ea710bfa1ee810ba5c6a916344de170f4e9be5d7eaeb9c2241c2857ff81fc54e3f0dbb3712829b953ce71bdd5f56c9d087f853562428ec967d776bfb473  patch-5.4.49.xz"
